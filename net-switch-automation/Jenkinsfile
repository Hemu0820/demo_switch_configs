pipeline {
  agent any

  options {
    timestamps()
    ansiColor('xterm')
    buildDiscarder(logRotator(numToKeepStr: '20'))
  }

  environment {
    PYENV = '.venv'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
        sh 'ls -la'
      }
    }

    stage('Set up Python venv') {
      steps {
        sh '''
          python3 -m venv ${PYENV}
          . ${PYENV}/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
        '''
      }
    }

    stage('Static checks (optional)') {
      when { expression { return fileExists('ruff.toml') || fileExists('pyproject.toml') } }
      steps {
        sh '''
          . ${PYENV}/bin/activate || true
          which ruff && ruff . || true
          which mypy && mypy src || true
        '''
      }
    }

    stage('Unit & Integration tests') {
      steps {
        sh '''
          . ${PYENV}/bin/activate
          mkdir -p reports
          pytest -q             --cov=src             --cov-report=term-missing             --cov-report=xml:reports/coverage.xml             --cov-report=html:htmlcov             --junitxml=reports/junit.xml
        '''
      }
      post {
        always {
          junit 'reports/junit.xml'
          publishHTML(target: [
            reportDir: 'htmlcov',
            reportFiles: 'index.html',
            reportName: 'Coverage HTML'
          ])
          archiveArtifacts artifacts: 'reports/**', allowEmptyArchive: true
        }
      }
    }

    stage('Coverage gate') {
      steps {
        script {
          // simple coverage threshold check (>= 90%)
          def xml = readFile('reports/coverage.xml')
          def m = xml =~ /line-rate="([0-9.]+)"/
          if (!m) { error 'Could not parse coverage.xml for line-rate' }
          def rate = (m[0][1] as double)
          echo "Coverage line-rate: ${rate}"
          if (rate < 0.90) {
            error "Coverage below threshold (90%). Failing the build."
          }
        }
      }
    }

    stage('Plan & (Mock) Deploy') {
      when { branch 'main' }
      steps {
        sh '''
          . ${PYENV}/bin/activate
          python - <<'PY'
from src.generators.config_gen import render_ntp_from_file
from src.pipeline.apply import apply_config
from src.adapters.mock_cli import MockCLI
from src.pipeline.plan import diff

candidate = render_ntp_from_file('data/changes/change_001_ntp.yml')
cli = MockCLI()
running = cli.show_running_config()
print('--- PLAN (diff) ---')
print(diff(running, candidate))
print('--- APPLY (mock) ---')
print(apply_config(candidate))
PY
        '''
      }
    }
  }

  post {
    success {
      echo 'Build succeeded ✅'
    }
    failure {
      echo 'Build failed ❌'
    }
  }
}
